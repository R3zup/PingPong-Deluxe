#BlueJ class context
comment0.target=BILD
comment0.text=\n\ Klasse\ BILD\ zum\ Darstellen\ eines\ GIF,\ JPG,\ PNG\ in\ EDU-Engine\n\ \n\ @author\ \ \ \ \ \ mike\ ganshorn\n\ \n\ @version\ \ \ \ \ 1.4-beginner\ (2017-04-11)\n\ \n\ @changelog\ \ \ 1.4\ WECHSELBILD\ erbt\ von\ Knoten\ und\ damit\ von\ Raum\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ verschiebenUm\ greift\ auf\ bewegen\ zurueck\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Methoden\ in\ allen\ Klassen\ vereinheitlicht\ (bis\ auf\ indiv.\ Methoden)\n\ \ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ 1.3\ Methode\ beruehrt(WECHSELBILD)\ hinzugefuegt\n\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ 1.2\ Jump'n'Run-Physik\ hinzu\ gefuegt\n\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ 1.1\ Konstruktor\ setzt\ nun\ Bild-Mittelpunkt\ auf\ uebergebenen\ Mittelpunkt\ (nicht\ Ecke\ links\ oben)\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \n
comment1.params=x\ y\ name
comment1.target=BILD(int,\ int,\ java.lang.String)
comment1.text=\n\ BILD\ Konstruktor.\n\n\ @param\ \ \ x\ \ \ \ \ \ \ x-Koordinate\ im\ Fenster\ (Pixel)\n\ \n\ @param\ \ \ y\ \ \ \ \ \ \ y-Koordinate\ im\ Fenster\ (Pixel)\n\ \n\ @param\ \ \ name\ \ \ \ Name\ der\ Grafik-Datei\ (im\ Projekt-Ordner)\n
comment10.params=winkelAenderung
comment10.target=void\ drehenUm(float)
comment10.text=\n\ Dreht\ die\ Grafik\ um\ den\ angegebenen\ Winkel.\ \n\n\ @param\ \ \ winkelAenderung\ \ \ \ \ +\:\ mathematisch\ positiver\ Drehsinn\ (gegen\ den\ Uhrzeigersinn)\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ -\:\ mathematisch\ negativer\ Drehsinn\ (im\ Uhrzeigersinn)\n
comment11.params=neuerDrehwinkel
comment11.target=void\ setzeDrehwinkel(float)
comment11.text=\n\ Setzt\ den\ Drehwinkel\ auf\ einen\ absoluten\ neuen\ Wert.\ \n\ Die\ Orientierung\ unmittelbar\ nach\ dem\ Erzeugen\ des\ Objekts\ entspricht\ Winkel\ 0.\n\n\ @param\ \ \ neuerDrehwinkel\ \ \ \ \ der\ neue\ Drehwinkel\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ +\:\ mathematisch\ positiver\ Drehsinn\ (gegen\ den\ Uhrzeigersinn)\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ -\:\ mathematisch\ negativer\ Drehsinn\ (im\ Uhrzeigersinn)\n
comment12.params=
comment12.target=float\ nenneWinkel()
comment12.text=\n\ Nennt\ den\ Winkel,\ um\ den\ die\ Grafik\ gegenueber\ ihrer\ Erzeugung\ gedreht\ wurde.\ \n\n\ @return\ \ \ \ \ \ der\ Winkel,\ um\ den\ die\ Grafik\ gedreht\ wurde\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ 0\:\ wenn\ nicht\ gedreht\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ +\:\ wenn\ mathematisch\ positiver\ Drehsinn\ (gegen\ den\ Uhrzeigersinn)\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ -\:\ wenn\ mathematisch\ negativer\ Drehsinn\ (im\ Uhrzeigersinn)\n
comment13.params=
comment13.target=float\ sin_Drehwinkel()
comment13.text=\n\ Liefert\ den\ Sinus\ des\ aktuellen\ Drehwinkels\ der\ Grafik.\ \n\n\ @return\ \ Sinus\ des\ aktuellen\ Drehwinkels\n
comment14.params=
comment14.target=float\ cos_Drehwinkel()
comment14.text=\n\ Liefert\ den\ Cosinus\ des\ aktuellen\ Drehwinkels\ der\ Grafik.\ \n\n\ @return\ \ Cosinus\ des\ aktuellen\ Drehwinkels\n
comment15.params=grafikObjekt
comment15.target=int\ berechneAbstandX(ea.Raum)
comment15.text=\n\ Diese\ Methode\ prueft,\ wie\ weit\ der\ Mittelpunkt\ dieses\ Objekts\ vom\ Mittelpunkt\ \n\ eines\ anderen\ Grafik-Objekts\ in\ x-Richtung\ entfernt\ ist.\n\ \n\ @param\ \ \ grafikObjekt\ \ \ \ Das\ andere\ Grafik-Objekt\n\ \n\ @return\ \ Abstand\ (in\ Pixeln)\ dieses\ Rechtecks\ vom\ anderen\ Grafik-Objekt\ in\ x-Richtung\ \n\ \ \ \ \ \ \ \ \ \ (>0,\ wenn\ dieses\ Rechteck\ rechts\ des\ anderen\ Grafik-Objekts\ liegt)\n
comment16.params=grafikObjekt
comment16.target=int\ berechneAbstandY(ea.Raum)
comment16.text=\n\ Diese\ Methode\ prueft,\ wie\ weit\ der\ Mittelpunkt\ dieses\ Objekts\ vom\ Mittelpunkt\ \n\ eines\ anderen\ Grafik-Objekts\ in\ y-Richtung\ entfernt\ ist.\n\ \n\ @param\ \ \ grafikObjekt\ \ \ \ Das\ andere\ Grafik-Objekt\n\ \n\ @return\ \ Abstand\ (in\ Pixeln)\ dieses\ Kreises\ vom\ anderen\ Grafik-Objekt\ in\ y-Richtung\ \n\ \ \ \ \ \ \ \ \ \ (>0,\ wenn\ dieser\ Kreis\ unterhalb\ des\ anderen\ Grafik-Objekts\ liegt)\n
comment2.params=deltaX\ deltaY
comment2.target=void\ verschiebenUm(float,\ float)
comment2.text=\n\ Verschiebt\ das\ Objekt\ um\ die\ angegebenen\ Pixel.\ \n\n\ @param\ \ \ deltaX\ \ Pixel\ in\ x-Richtung\ (wird\ bei\ Bedarf\ auf\ ganze\ Pixel\ gerundet)\n\ \n\ @param\ \ \ deltaY\ \ Pixel\ in\ y-Richtung\ (wird\ bei\ Bedarf\ auf\ ganze\ Pixel\ gerundet)\n
comment3.params=r
comment3.target=boolean\ beruehrt(ea.Raum)
comment3.text=\n\ Prueft,\ ob\ ein\ anderes\ Grafik-Objekt\ beruehrt\ wird.\ \n\n\ @param\ \ \ r\ \ \ Ein\ anderes\ BILD,\ RECHTECK,\ KREIS,\ DREIECK,\ ...\n\ \n\ @return\ \ true,\ wenn\ sich\ die\ beiden\ Objekte\ ueberschneiden\n
comment4.params=x\ y
comment4.target=boolean\ beinhaltetPunkt(int,\ int)
comment4.text=\n\ Prueft,\ ob\ das\ Objekt\ einen\ bestimmten\ Punkt\ (in\ Pixel-Koordinaten)\ beinhaltet.\ \n\n\ @param\ \ \ x\ \ \ x-Koordinate\ des\ Punkts\ (Pixel)\n\ \n\ @param\ \ \ y\ \ \ x-Koordinate\ des\ Punkts\ (Pixel)\n\ \n\ @return\ \ \ \ \ \ true,\ wenn\ Punkt\ innerhalb\ der\ Grafik\n
comment5.params=x\ y
comment5.target=void\ setzeMittelpunkt(int,\ int)
comment5.text=\n\ Setzt\ den\ Mittelpunkt\ des\ Objekts\ auf\ einen\ (in\ Pixel-Koordinaten)\ anzugebenden\ Punkt.\ \n\n\ @param\ \ \ x\ \ \ x-Koordinate\ des\ Mittelpunkts\ (Pixel)\n\ \n\ @param\ \ \ y\ \ \ y-Koordinate\ des\ Mittelpunkts\ (Pixel)\n
comment6.params=
comment6.target=int\ nenneMx()
comment6.text=\n\ Nennt\ die\ x-Koordinate\ (in\ Pixel)\ des\ Mittelpunkts\ dieses\ Objekts.\ \n\n\ @return\ \ x-Koordinate\ des\ Mittelpunkts\ (Pixel)\n
comment7.params=
comment7.target=int\ nenneMy()
comment7.text=\n\ Nennt\ die\ y-Koordinate\ (in\ Pixel)\ des\ Mittelpunkts\ dieses\ Objekts.\ \n\n\ @return\ \ y-Koordinate\ des\ Mittelpunkts\ (Pixel)\n
comment8.params=sichtbarNeu
comment8.target=void\ setzeSichtbar(boolean)
comment8.text=\n\ Macht\ das\ Objekt\ sichtbar\ /\ unsichtbar.\ \n\n\ @param\ \ \ sichtbarNeu\ \ \ \ \ true,\ wenn\ die\ Grafik\ sichtbar\ sein\ soll,\ sonst\ false\n
comment9.params=
comment9.target=boolean\ nenneSichtbar()
comment9.text=\n\ Prueft,\ od\ dieses\ Objekt\ gerade\ sichtbar\ ist.\ \n\n\ @return\ \ true,\ wenn\ die\ Grafik\ gerade\ sichbar\ ist,\ sonst\ false\n
numComments=17
