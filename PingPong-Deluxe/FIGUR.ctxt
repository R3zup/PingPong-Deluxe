#BlueJ class context
comment0.target=FIGUR
comment0.text=\r\n\ Klasse\ FIGUR.\r\n\r\n\ @author\ \ \ \ \ \ mike\ ganshorn\r\n\ @version\ \ \ \ \ 1.3\ (2017-04-11)\r\n\ \r\n\ @changelog\ \ \ 1.3\ WECHSELBILD\ erbt\ von\ Knoten\ und\ damit\ von\ Raum\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ verschiebenUm\ greift\ auf\ bewegen\ zurueck\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Methoden\ in\ allen\ Klassen\ vereinheitlicht\ (bis\ auf\ indiv.\ Methoden)\r\n\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ 1.2\ Methode\ beruehrt(WECHSELBILD)\ hinzugefuegt\r\n\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ 1.1\ Jump'n'Run-Physik\ hinzu\ gefuegt\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\r\n
comment1.params=x\ y\ figurDatei
comment1.target=FIGUR(int,\ int,\ java.lang.String)
comment1.text=\r\n\ FIGUR\ Konstruktor\r\n\r\n\ @param\ \ \ x\ \ \ \ \ \ \ \ \ \ \ x-Koordinate\ des\ Mittelpunkts\r\n\ \r\n\ @param\ \ \ y\ \ \ \ \ \ \ \ \ \ \ y-Koordinate\ des\ Mittelpunkts\r\n\ \r\n\ @param\ \ \ figurDatei\ \ z.B.\ meineFigur.eaf\r\n
comment10.params=rot\ gruen\ blau
comment10.target=void\ setzeFarbtransformation(int,\ int,\ int)
comment10.text=\r\n\ Damit\ kann\ man\ eine\ Figur\ verfaerben.\ \r\n\r\n\ @param\ \ \ rot\ \ \ \ \ 0-255\ fuer\ roten\ Anteil\r\n\ \r\n\ @param\ \ \ gruen\ \ \ 0-255\ fuer\ gruenen\ Anteil\r\n\ \r\n\ @param\ \ \ blau\ \ \ \ 0-255\ fuer\ blauen\ Anteil\r\n
comment11.params=
comment11.target=void\ setzeFarbtransformationZurueck()
comment11.text=\r\n\ Damit\ kann\ man\ eine\ Verfaerbung\ wieder\ rueckgaengig\ machen.\ \r\n\r\n
comment12.params=
comment12.target=boolean\ nenneFarbenInvertiert()
comment12.text=\r\n\ Gibt\ an,\ ob\ die\ Farben\ gerade\ invertiert\ sind.\ \r\n\r\n\ @return\ \ true,\ wenn\ die\ Farben\ gerade\ invertiert\ sind,\ sonst\ false\r\n
comment13.params=invertiert
comment13.target=void\ setzeFarbenInvertiert(boolean)
comment13.text=\r\n\ Zwischen\ original\ Bild\ und\ Farb-Negativ-Bild\ wechseln.\r\n\r\n\ @param\ \ \ invertiert\ \ true\ zeigt\ das\ Negativ,\ false\ zeigt\ das\ Original;\r\n
comment14.params=
comment14.target=boolean\ nenneSpiegelX()
comment14.text=\r\n\ Gibt\ an,\ ob\ die\ Figur\ gerade\ horizontal\ gespiegelt\ ist.\r\n\r\n\ @return\ \ true,\ wenn\ gespiegelt\ ist,\ sonst\ false\r\n
comment15.params=spiegelX
comment15.target=void\ setzeSpielgelX(boolean)
comment15.text=\r\n\ Figur\ horizontal\ spiegeln.\r\n\r\n\ @param\ \ \ spiegelX\ \ \ \ true\ spiegelt\ die\ Figur,\ false\ spiegelt\ wieder\ zurueck\r\n
comment16.params=
comment16.target=boolean\ nenneSpiegelY()
comment16.text=\r\n\ Gibt\ an,\ ob\ die\ Figur\ gerade\ vertikal\ gespiegelt\ ist.\r\n\r\n\ @return\ \ true,\ wenn\ gespiegelt\ ist,\ sonst\ false\r\n
comment17.params=spiegelY
comment17.target=void\ setzeSpielgelY(boolean)
comment17.text=\r\n\ Figur\ vertikal\ spiegeln.\r\n\r\n\ @param\ \ \ spiegelY\ \ \ \ true\ spiegelt\ die\ Figur,\ false\ spiegelt\ wieder\ zurueck\r\n
comment18.params=deltaX\ deltaY
comment18.target=void\ verschiebenUm(float,\ float)
comment18.text=\r\n\ Verschiebt\ das\ Objekt\ um\ die\ angegebenen\ Pixel.\ \r\n\r\n\ @param\ \ \ deltaX\ \ Pixel\ in\ x-Richtung\ (wird\ bei\ Bedarf\ auf\ ganze\ Pixel\ gerundet)\r\n\ \r\n\ @param\ \ \ deltaY\ \ Pixel\ in\ y-Richtung\ (wird\ bei\ Bedarf\ auf\ ganze\ Pixel\ gerundet)\r\n
comment19.params=r
comment19.target=boolean\ beruehrt(ea.Raum)
comment19.text=\r\n\ Prueft,\ ob\ ein\ anderes\ Grafik-Objekt\ beruehrt\ wird.\ \r\n\r\n\ @param\ \ \ r\ \ \ Ein\ anderes\ BILD,\ RECHTECK,\ KREIS,\ DREIECK,\ ...\r\n\ @return\ \ true,\ wenn\ sich\ die\ beiden\ Objekte\ ueberschneiden\r\n
comment2.params=
comment2.target=int\ nenneBildNummer()
comment2.text=\r\n\ Gibt\ den\ Index\ des\ aktuell\ sichtbaren\ Bilds\ zurueck.\ \r\n\r\n\ @return\ \ Index\ des\ aktuellen\ Bilds\ (beginnend\ mit\ 0)\r\n
comment20.params=x\ y
comment20.target=boolean\ beinhaltetPunkt(int,\ int)
comment20.text=\r\n\ Prueft,\ ob\ das\ Objekt\ einen\ bestimmten\ Punkt\ (in\ Pixel-Koordinaten)\ beinhaltet.\ \r\n\r\n\ @param\ \ \ x\ \ \ x-Koordinate\ des\ Punkts\ (Pixel)\r\n\ \r\n\ @param\ \ \ y\ \ \ x-Koordinate\ des\ Punkts\ (Pixel)\r\n\ \r\n\ @return\ \ \ \ \ \ true,\ wenn\ Punkt\ innerhalb\ der\ Grafik\r\n
comment21.params=x\ y
comment21.target=void\ setzeMittelpunkt(int,\ int)
comment21.text=\r\n\ Setzt\ den\ Mittelpunkt\ des\ Objekts\ auf\ einen\ (in\ Pixel-Koordinaten)\ anzugebenden\ Punkt.\ \r\n\r\n\ @param\ \ \ x\ \ \ x-Koordinate\ des\ Mittelpunkts\ (Pixel)\r\n\ \r\n\ @param\ \ \ y\ \ \ y-Koordinate\ des\ Mittelpunkts\ (Pixel)\r\n
comment22.params=
comment22.target=int\ nenneMx()
comment22.text=\r\n\ Nennt\ die\ x-Koordinate\ (in\ Pixel)\ des\ Mittelpunkts\ dieses\ Objekts.\ \r\n\r\n\ @return\ \ x-Koordinate\ des\ Mittelpunkts\ (Pixel)\r\n
comment23.params=
comment23.target=int\ nenneMy()
comment23.text=\r\n\ Nennt\ die\ y-Koordinate\ (in\ Pixel)\ des\ Mittelpunkts\ dieses\ Objekts.\ \r\n\r\n\ @return\ \ y-Koordinate\ des\ Mittelpunkts\ (Pixel)\r\n
comment24.params=sichtbarNeu
comment24.target=void\ setzeSichtbar(boolean)
comment24.text=\r\n\ Macht\ das\ Objekt\ sichtbar\ /\ unsichtbar.\ \r\n\r\n\ @param\ \ \ sichtbarNeu\ \ \ \ \ true,\ wenn\ die\ Grafik\ sichtbar\ sein\ soll,\ sonst\ false\r\n
comment25.params=
comment25.target=boolean\ nenneSichtbar()
comment25.text=\r\n\ Prueft,\ od\ dieses\ Objekt\ gerade\ sichtbar\ ist.\ \r\n\r\n\ @return\ \ true,\ wenn\ die\ Grafik\ gerade\ sichbar\ ist,\ sonst\ false\r\n
comment26.params=winkelAenderung
comment26.target=void\ drehenUm(float)
comment26.text=\r\n\ Dreht\ die\ Grafik\ um\ den\ angegebenen\ Winkel.\ \r\n\r\n\ @param\ \ \ winkelAenderung\ \ \ \ \ +\:\ mathematisch\ positiver\ Drehsinn\ (gegen\ den\ Uhrzeigersinn)\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ -\:\ mathematisch\ negativer\ Drehsinn\ (im\ Uhrzeigersinn)\r\n
comment27.params=neuerDrehwinkel
comment27.target=void\ setzeDrehwinkel(float)
comment27.text=\r\n\ Setzt\ den\ Drehwinkel\ auf\ einen\ absoluten\ neuen\ Wert.\ \r\n\ Die\ Orientierung\ unmittelbar\ nach\ dem\ Erzeugen\ des\ Objekts\ entspricht\ Winkel\ 0.\r\n\r\n\ @param\ \ \ neuerDrehwinkel\ \ \ \ \ der\ neue\ Drehwinkel\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ +\:\ mathematisch\ positiver\ Drehsinn\ (gegen\ den\ Uhrzeigersinn)\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ -\:\ mathematisch\ negativer\ Drehsinn\ (im\ Uhrzeigersinn)\r\n
comment28.params=
comment28.target=float\ nenneWinkel()
comment28.text=\r\n\ Nennt\ den\ Winkel,\ um\ den\ die\ Grafik\ gegenueber\ ihrer\ Erzeugung\ gedreht\ wurde.\ \r\n\r\n\ @return\ \ \ \ \ \ der\ Winkel,\ um\ den\ die\ Grafik\ gedreht\ wurde\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ 0\:\ wenn\ nicht\ gedreht\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ +\:\ wenn\ mathematisch\ positiver\ Drehsinn\ (gegen\ den\ Uhrzeigersinn)\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ -\:\ wenn\ mathematisch\ negativer\ Drehsinn\ (im\ Uhrzeigersinn)\r\n
comment29.params=
comment29.target=float\ sin_Drehwinkel()
comment29.text=\r\n\ Liefert\ den\ Sinus\ des\ aktuellen\ Drehwinkels\ der\ Grafik.\ \r\n\r\n\ @return\ \ Sinus\ des\ aktuellen\ Drehwinkels\r\n
comment3.params=index
comment3.target=void\ setzeBildNummer(int)
comment3.text=\r\n\ Macht\ ein\ bestimmtes\ Bild\ einer\ Figur\ sichtbar\ (und\ alle\ anderen\ Bilder\ unsichtbar)\r\n\r\n\ @param\ \ \ index\ \ \ Index\ des\ Bilds\ (beginnend\ mit\ 0)\r\n
comment30.params=
comment30.target=float\ cos_Drehwinkel()
comment30.text=\r\n\ Liefert\ den\ Cosinus\ des\ aktuellen\ Drehwinkels\ der\ Grafik.\ \r\n\r\n\ @return\ \ Cosinus\ des\ aktuellen\ Drehwinkels\r\n
comment31.params=grafikObjekt
comment31.target=int\ berechneAbstandX(ea.Raum)
comment31.text=\r\n\ Diese\ Methode\ prueft,\ wie\ weit\ der\ Mittelpunkt\ dieses\ Objekts\ vom\ Mittelpunkt\ \r\n\ eines\ anderen\ Grafik-Objekts\ in\ x-Richtung\ entfernt\ ist.\r\n\ \r\n\ @param\ \ \ grafikObjekt\ \ \ \ Das\ andere\ Grafik-Objekt\r\n\ \r\n\ @return\ \ Abstand\ (in\ Pixeln)\ dieses\ Rechtecks\ vom\ anderen\ Grafik-Objekt\ in\ x-Richtung\ \r\n\ \ \ \ \ \ \ \ \ \ (>0,\ wenn\ dieses\ Rechteck\ rechts\ des\ anderen\ Grafik-Objekts\ liegt)\r\n
comment32.params=grafikObjekt
comment32.target=int\ berechneAbstandY(ea.Raum)
comment32.text=\r\n\ Diese\ Methode\ prueft,\ wie\ weit\ der\ Mittelpunkt\ dieses\ Objekts\ vom\ Mittelpunkt\ \r\n\ eines\ anderen\ Grafik-Objekts\ in\ y-Richtung\ entfernt\ ist.\r\n\ \r\n\ @param\ \ \ grafikObjekt\ \ \ \ Das\ andere\ Grafik-Objekt\r\n\ \r\n\ @return\ \ Abstand\ (in\ Pixeln)\ dieses\ Kreises\ vom\ anderen\ Grafik-Objekt\ in\ y-Richtung\ \r\n\ \ \ \ \ \ \ \ \ \ (>0,\ wenn\ dieser\ Kreis\ unterhalb\ des\ anderen\ Grafik-Objekts\ liegt)\r\n
comment4.params=
comment4.target=boolean\ nenneAnimiert()
comment4.text=\r\n\ Zeigt\ an,\ ob\ die\ Figur\ gerade\ animiert\ ist.\r\n\r\n\ @return\ \ true,\ wenn\ animiert,\ sonst\ false\r\n
comment5.params=animiert
comment5.target=void\ setzeAnimiert(boolean)
comment5.text=\r\n\ Schaltet\ den\ Animations-Effekt\ einer\ Figur\ an\ /\ aus.\r\n\r\n\ @param\ \ \ animiert\ \ \ \ true\ schaltet\ die\ Animation\ an,\ false\ schaltet\ sie\ aus\r\n
comment6.params=
comment6.target=int\ nenneAnimationsIntervall()
comment6.text=\r\n\ Gibt\ die\ Zeit\ in\ Milli-Sekunden\ (Tausendstel\ Sekunden)\ zurueck,\ \r\n\ die\ zwischen\ 2\ aufeinander\ folgenden\ Bildern\ liegt.\r\n\r\n\ @return\ \ Anzahl\ an\ Milli-Sekunden\ zwischen\ 2\ aufeinander\ folgenden\ Bildern\r\n
comment7.params=milli_sec
comment7.target=void\ setzeAnimationsIntervall(int)
comment7.text=\r\n\ Setzt\ das\ Zeit-Intervall\ fuer\ die\ Animation.\ \r\n\r\n\ @param\ \ \ milli_sec\ \ \ Anzahl\ an\ Milli-Sekunden\ (Tausendstel\ Sekunden)\ zwischen\ 2\ aufeinander\ folgenden\ Bildern\r\n
comment8.params=
comment8.target=int\ nenneVergroesserung()
comment8.text=\r\n\ Gibt\ den\ aktuellen\ Vergroesserungs-Faktor\ an.\r\n\r\n\ @return\ \ Vergroesserung\ als\ ganze\ Zahl\ (\ 1\ \=\ normal\ ,\ 2\ \=\ doppelt\ so\ gross\ ,\ ...\ )\r\n
comment9.params=faktor
comment9.target=void\ setzeVergroesserung(int)
comment9.text=\r\n\ Setzt\ den\ Vergroesserungs-Faktor.\ \r\n\r\n\ @param\ \ \ faktor\ \ Vergroesserung\ als\ ganze\ Zahl\ (\ 1\ \=\ normal\ ,\ 2\ \=\ doppelt\ so\ gross\ ,\ ...\ )\r\n
numComments=33
