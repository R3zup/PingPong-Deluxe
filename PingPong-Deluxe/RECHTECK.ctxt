#BlueJ class context
comment0.target=RECHTECK
comment0.text=\r\n\ Diese\ Klasse\ stellt\ ein\ einfaches\ Rechteck\ dar.\r\n
comment1.params=
comment1.target=RECHTECK()
comment1.text=\r\n\ Konstruktor\ der\ Klasse\ <code>RECHTECK</code>.\ Erstellt\ ein\ neues\ Standard-Rechteck.\r\n
comment10.params=
comment10.target=int\ nenneMx()
comment10.text=\r\n\ Diese\ Methode\ gibt\ die\ x-Koordinate\ des\ Mittelpunkts\ dieses\ Dreiecks\ zurueck.\r\n\ \r\n\ @return\ \ Die\ aktuelle\ x-Koordinate\ des\ Mittelpunktes\ dieses\ Dreiecks\r\n
comment11.params=
comment11.target=int\ nenneMy()
comment11.text=\r\n\ Diese\ Methode\ gibt\ die\ y-Koordinate\ des\ Mittelpunkts\ dieses\ Kreises\ zurueck.\r\n\ \r\n\ @return\ \ Die\ aktuelle\ y-Koordinate\ des\ Mittelpunktes\ dieses\ Kreises\r\n
comment12.params=
comment12.target=int\ nenneBreite()
comment12.text=\r\n\ Diese\ Methode\ gibt\ die\ Breite\ dieses\ Rechtecks\ zurueck.\r\n\ \r\n\ @return\ \ Die\ aktuelle\ Breite\ dieses\ Rechtecks\r\n
comment13.params=
comment13.target=int\ nenneHoehe()
comment13.text=\r\n\ Diese\ Methode\ gibt\ die\ Hoehe\ dieses\ Rechtecks\ zurueck.\r\n\ \r\n\ @return\ \ Die\ aktuelle\ Hoehe\ dieses\ Rechtecks\r\n
comment14.params=
comment14.target=java.lang.String\ nenneFarbe()
comment14.text=\r\n\ Diese\ Methode\ gibt\ die\ Farbe\ dieses\ Rechtecks\ zurueck.\r\n\ \r\n\ @return\ \ Die\ aktuelle\ Farbe\ dieses\ Rechtecks\r\n
comment15.params=
comment15.target=boolean\ nenneSichtbar()
comment15.text=\r\n\ Diese\ Methode\ gibt\ die\ Sichtbarkeit\ dieses\ Rechtecks\ zurueck.\r\n\ \r\n\ @return\ \ Die\ aktuelle\ Sichtbarkeit\ dieses\ Rechtecks\r\n
comment16.params=grafikObjekt
comment16.target=int\ berechneAbstandX(ea.Raum)
comment16.text=\r\n\ Diese\ Methode\ prueft,\ wie\ weit\ der\ Mittelpunkt\ dieses\ Rechtecks\ vom\ Mittelpunkt\ \r\n\ eines\ anderen\ Grfik-Objekts\ in\ x-Richtung\ entfernt\ ist.\r\n\ \r\n\ @param\ \ \ grafikObjekt\ \ \ \ Das\ andere\ Grafik-Objekt\r\n\ \r\n\ @return\ \ Abstand\ (in\ Pixeln)\ dieses\ Rechtecks\ vom\ anderen\ Grafik-Objekt\ in\ x-Richtung\ (>0,\ wenn\ dieses\ Rechteck\ rechts\ des\ anderen\ Grafik-Objekts\ liegt)\r\n
comment17.params=grafikObjekt
comment17.target=int\ berechneAbstandY(ea.Raum)
comment17.text=\r\n\ Diese\ Methode\ prueft,\ wie\ weit\ der\ Mittelpunkt\ dieses\ Rechtecks\ vom\ Mittelpunkt\ \r\n\ eines\ anderen\ Grfik-Objekts\ in\ y-Richtung\ entfernt\ ist.\r\n\ \r\n\ @param\ \ \ grafikObjekt\ \ \ \ Das\ andere\ Grafik-Objekt\r\n\ \r\n\ @return\ \ Abstand\ (in\ Pixeln)\ dieses\ Rechtecks\ vom\ anderen\ Grafik-Objekt\ in\ y-Richtung\ (>0,\ wenn\ dieses\ Rechteck\ unterhalb\ des\ anderen\ Grafik-Objekts\ liegt)\r\n
comment18.params=
comment18.target=float\ sin_Drehwinkel()
comment18.text=\r\n\ liefert\ den\ Sinus\ des\ Drehwinkels\ der\ Grafik\r\n\r\n\ @return\ \ Sinus\ des\ aktuellen\ Drehwinkels\r\n
comment19.params=
comment19.target=float\ cos_Drehwinkel()
comment19.text=\r\n\ liefert\ den\ Cosinus\ des\ Drehwinkels\ der\ Grafik\r\n\r\n\ @return\ \ Cosinus\ des\ aktuellen\ Drehwinkels\r\n
comment2.params=breite\ hoehe
comment2.target=RECHTECK(int,\ int)
comment2.text=\r\n\ Konstruktor\ der\ Klasse\ <code>RECHTECK</code>.\ Erstellt\ ein\ neues\ Rechteck\ mit\ gegebenen\ Massen.\r\n\r\n\ @param\ \ \ breite\ \ Breite\ des\ Rechtecks\r\n\ \r\n\ @param\ \ \ hoehe\ \ \ Hoehe\ des\ Rechtecks\r\n
comment20.params=winkelAenderung
comment20.target=void\ drehenUm(float)
comment20.text=\r\n\ Dreht\ die\ Grafik\ um\ einen\ Winkel\r\n\r\n\ @param\ \ \ winkelAenderung\ \ \ \ \ +\:\ mathematisch\ positiver\ Drehsinn\ (gegen\ den\ Uhrzeigersinn)\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ -\:\ mathematisch\ negativer\ Drehsinn\ (im\ Uhrzeigersinn)\r\n
comment21.params=neuerDrehwinkel
comment21.target=void\ setzeDrehwinkel(float)
comment21.text=\r\n\ Setzt\ den\ Drehwinkel\ auf\ eine\ absoluten\ neuen\ Wert\r\n\r\n\ @param\ \ \ neuerDrehwinkel\ \ \ \ \ der\ neue\ Drehwinkel\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ +\:\ mathematisch\ positiver\ Drehsinn\ (gegen\ den\ Uhrzeigersinn)\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ -\:\ mathematisch\ negativer\ Drehsinn\ (im\ Uhrzeigersinn)\r\n
comment22.params=
comment22.target=float\ nenneWinkel()
comment22.text=\r\n\ Nennt\ den\ Winkel,\ um\ den\ die\ Grafik\ gedreht\ wurde\r\n\r\n\ @return\ \ \ \ \ \ der\ Winkel,\ um\ den\ die\ Grafik\ gedreht\ wurde\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ 0\:\ wenn\ nicht\ gedreht\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ +\:\ wenn\ mathematisch\ positiver\ Drehsinn\ (gegen\ den\ Uhrzeigersinn)\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ -\:\ wenn\ mathematisch\ negativer\ Drehsinn\ (im\ Uhrzeigersinn)\r\n
comment3.params=breite\ hoehe
comment3.target=void\ setzeGroesse(int,\ int)
comment3.text=\r\n\ Setzt\ die\ Hoehe\ und\ Breite\ dieses\ Rechtecks\ neu.\r\n\ \r\n\ @param\ \ \ breite\ \ Die\ neue\ Breite\ dieses\ Rechtecks\r\n\ \r\n\ @param\ \ \ hoehe\ \ \ Die\ neue\ Hoehe\ dieses\ Rechtecks\r\n
comment4.params=farbeNeu
comment4.target=void\ setzeFarbe(java.lang.String)
comment4.text=\r\n\ Setzt\ die\ Farbe\ dieses\ Rechtecks\ neu.\r\n\ \r\n\ @param\ \ \ farbeNeu\ \ \ \ Diese\ Farbe\ erhaelt\ das\ Rechteck\ (z.B.\ "Rot")\r\n
comment5.params=x\ y
comment5.target=void\ setzeMittelpunkt(int,\ int)
comment5.text=\r\n\ Setzt\ den\ Mittelpunkt\ dieses\ Rechtecks\ neu.\r\n\ \r\n\ @param\ \ \ m_x\ Die\ X-Koordinate\ des\ neuen\ Mittelpunktes\r\n\ \r\n\ @param\ \ \ m_y\ Die\ Y-Koordinate\ des\ neuen\ Mittelpunktes\r\n
comment6.params=sichtbarNeu
comment6.target=void\ setzeSichtbar(boolean)
comment6.text=\r\n\ Setzt,\ ob\ dieses\ Rechteck\ sichtbar\ sein\ soll.\r\n\ \r\n\ @param\ \ \ sichtbarNeu\ Ist\ dieser\ Wert\ <code>true</code>,\ ist\ nach\ dem\ Aufruf\ dieser\ \r\n\ \ \ \ \ \ \ \ \ \ Methode\ dieses\ Rechteck\ sichtbar.\ Ist\ dieser\ Wert\ <code>false</code>,\ so\ ist\ \r\n\ \ \ \ \ \ \ \ \ \ nach\ dem\ Aufruf\ dieser\ Methode\ dieses\ Rechteck\ unsichtbar.\r\n
comment7.params=deltaX\ deltaY
comment7.target=void\ verschiebenUm(float,\ float)
comment7.text=\r\n\ Verschiebt\ dieses\ Rechteck\ um\ eine\ Verschiebung\ -\ angegeben\ durch\ ein\ "Delta\ X"\ und\ "Delta\ Y".\r\n\ \r\n\ @param\ \ \ deltaX\ \ Der\ X\ Anteil\ dieser\ Verschiebung.\ Positive\ Werte\ verschieben\ nach\ rechts,\ negative\ nach\ links.\r\n\ \r\n\ @param\ \ \ deltaY\ \ Der\ Y\ Anteil\ dieser\ Verschiebung.\ Positive\ Werte\ verschieben\ nach\ unten,\ negative\ nach\ oben.\r\n
comment8.params=r
comment8.target=boolean\ beruehrt(ea.Raum)
comment8.text=\r\n\ Testet,\ ob\ ein\ anderes\ Grafik-Objekt\ beruehrt\ wird.\r\n\r\n\ @param\ \ \ r\ \ \ Ein\ anderes\ BILD,\ RECHTECK,\ KREIS,\ DREIECK,\ ...\r\n\ \r\n\ @return\ \ true,\ wenn\ sich\ die\ beiden\ Objekte\ ueberschneiden\r\n
comment9.params=x\ y
comment9.target=boolean\ beinhaltetPunkt(int,\ int)
comment9.text=\r\n\ Testet,\ ob\ ein\ Punkt\ beruehrt\ wird.\r\n\r\n\ @param\ \ \ x\ \ \ x-Koordinate\ des\ Punkts\ (Pixel)\r\n\ \r\n\ @param\ \ \ y\ \ \ x-Koordinate\ des\ Punkts\ (Pixel)\r\n\ \r\n\ @return\ \ \ \ \ \ true,\ wenn\ Punkt\ innerhalb\ der\ Grafik\r\n
numComments=23
