#BlueJ class context
comment0.target=WECHSELBILD
comment0.text=\n\ Klasse\ WECHSELBILD\ kann\ mehrere\ Bilder\ verwalten\ von\ denen\ immer\ nur\ eines\ angezeigt\ wird.\n\ \n\ @author\ \ \ \ \ \ mike\ ganshorn\n\ @version\ \ \ \ \ v1.1\ (2017-04-11)\n\ \n\ @changelog\ \ \ 1.1\ verschiebenUm\ greift\ nun\ konsequent\ auf\ bewegen\ zurueck\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ sichtbar(int)\ hinzugefuegt\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Methoden\ in\ allen\ Klassen\ vereinheitlicht\ (bis\ auf\ indiv.\ Methoden)\n\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ 1.0\ Grundlegende\ Implementierung\n\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \n
comment1.params=x\ y\ dateien
comment1.target=WECHSELBILD(int,\ int,\ java.lang.String[])
comment1.text=\n\ Konstruktor\ der\ Klasse\ WECHSELBILD.\n\ \n\ @param\ \ \ x\ \ \ \ \ \ \ \ \ \ \ x-Koordinate\ des\ Mittelpunkts\n\ \n\ @param\ \ \ y\ \ \ \ \ \ \ \ \ \ \ y-Koordinate\ des\ Mittelpunkts\n\ \n\ @param\ \ \ String...\ \ \ Ein\ oder\ mehrere\ Dateinamen\ durch\ Kommata\ getrennt\n
comment10.params=
comment10.target=int\ nenneMy()
comment10.text=\n\ Nennt\ die\ y-Koordinate\ (in\ Pixel)\ des\ Mittelpunkts\ dieses\ Objekts.\ \n\n\ @return\ \ y-Koordinate\ des\ Mittelpunkts\ (Pixel)\n
comment11.params=sichtbarNeu
comment11.target=void\ setzeSichtbar(boolean)
comment11.text=\n\ Macht\ das\ Objekt\ sichtbar\ /\ unsichtbar.\ \n\n\ @param\ \ \ sichtbarNeu\ \ \ \ \ true,\ wenn\ die\ Grafik\ sichtbar\ sein\ soll,\ sonst\ false\n
comment12.params=
comment12.target=boolean\ nenneSichtbar()
comment12.text=\n\ Prueft,\ od\ dieses\ Objekt\ gerade\ sichtbar\ ist.\ \n\n\ @return\ \ true,\ wenn\ die\ Grafik\ gerade\ sichbar\ ist,\ sonst\ false\n
comment13.params=winkelAenderung
comment13.target=void\ drehenUm(float)
comment13.text=\n\ Dreht\ die\ Grafik\ um\ den\ angegebenen\ Winkel.\ \n\n\ @param\ \ \ winkelAenderung\ \ \ \ \ +\:\ mathematisch\ positiver\ Drehsinn\ (gegen\ den\ Uhrzeigersinn)\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ -\:\ mathematisch\ negativer\ Drehsinn\ (im\ Uhrzeigersinn)\n
comment14.params=neuerDrehwinkel
comment14.target=void\ setzeDrehwinkel(float)
comment14.text=\n\ Setzt\ den\ Drehwinkel\ auf\ einen\ absoluten\ neuen\ Wert.\ \n\ Die\ Orientierung\ unmittelbar\ nach\ dem\ Erzeugen\ des\ Objekts\ entspricht\ Winkel\ 0.\n\n\ @param\ \ \ neuerDrehwinkel\ \ \ \ \ der\ neue\ Drehwinkel\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ +\:\ mathematisch\ positiver\ Drehsinn\ (gegen\ den\ Uhrzeigersinn)\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ -\:\ mathematisch\ negativer\ Drehsinn\ (im\ Uhrzeigersinn)\n
comment15.params=
comment15.target=float\ nenneWinkel()
comment15.text=\n\ Nennt\ den\ Winkel,\ um\ den\ die\ Grafik\ gegenueber\ ihrer\ Erzeugung\ gedreht\ wurde.\ \n\n\ @return\ \ \ \ \ \ der\ Winkel,\ um\ den\ die\ Grafik\ gedreht\ wurde\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ 0\:\ wenn\ nicht\ gedreht\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ +\:\ wenn\ mathematisch\ positiver\ Drehsinn\ (gegen\ den\ Uhrzeigersinn)\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ -\:\ wenn\ mathematisch\ negativer\ Drehsinn\ (im\ Uhrzeigersinn)\n
comment16.params=
comment16.target=float\ sin_Drehwinkel()
comment16.text=\n\ Liefert\ den\ Sinus\ des\ aktuellen\ Drehwinkels\ der\ Grafik.\ \n\n\ @return\ \ Sinus\ des\ aktuellen\ Drehwinkels\n
comment17.params=
comment17.target=float\ cos_Drehwinkel()
comment17.text=\n\ Liefert\ den\ Cosinus\ des\ aktuellen\ Drehwinkels\ der\ Grafik.\ \n\n\ @return\ \ Cosinus\ des\ aktuellen\ Drehwinkels\n
comment18.params=grafikObjekt
comment18.target=int\ berechneAbstandX(ea.Raum)
comment18.text=\n\ Diese\ Methode\ prueft,\ wie\ weit\ der\ Mittelpunkt\ dieses\ Objekts\ vom\ Mittelpunkt\ \n\ eines\ anderen\ Grafik-Objekts\ in\ x-Richtung\ entfernt\ ist.\n\ \n\ @param\ \ \ grafikObjekt\ \ \ \ Das\ andere\ Grafik-Objekt\n\ \n\ @return\ \ Abstand\ (in\ Pixeln)\ dieses\ Rechtecks\ vom\ anderen\ Grafik-Objekt\ in\ x-Richtung\ \n\ \ \ \ \ \ \ \ \ \ (>0,\ wenn\ dieses\ Rechteck\ rechts\ des\ anderen\ Grafik-Objekts\ liegt)\n
comment19.params=grafikObjekt
comment19.target=int\ berechneAbstandY(ea.Raum)
comment19.text=\n\ Diese\ Methode\ prueft,\ wie\ weit\ der\ Mittelpunkt\ dieses\ Objekts\ vom\ Mittelpunkt\ \n\ eines\ anderen\ Grafik-Objekts\ in\ y-Richtung\ entfernt\ ist.\n\ \n\ @param\ \ \ grafikObjekt\ \ \ \ Das\ andere\ Grafik-Objekt\n\ \n\ @return\ \ Abstand\ (in\ Pixeln)\ dieses\ Kreises\ vom\ anderen\ Grafik-Objekt\ in\ y-Richtung\ \n\ \ \ \ \ \ \ \ \ \ (>0,\ wenn\ dieser\ Kreis\ unterhalb\ des\ anderen\ Grafik-Objekts\ liegt)\n
comment2.params=
comment2.target=void\ wechseln()
comment2.text=\n\ Macht\ das\ aktuelle\ Bild\ unsichtbar\ und\ das\ naechste\ Bild\ sichtbar.\ \n\ Am\ Ende\ der\ Bilder\ wird\ wieder\ von\ Vorne\ bekonnen.\n\n
comment3.params=bildNr
comment3.target=void\ wechseln(int)
comment3.text=\n\ Macht\ das\ aktuelle\ Bild\ unsichtbar\ und\ das\ genannte\ Bild\ sichtbar.\ \n\ Sollte\ die\ gewahlte\ Bildnummer\ zu\ gross\ sein,\ wird\ ein\ anderes\ Bild\ sichtbar\ gemacht.\n\n\ @param\ \ \ bildNr\ \ Die\ Nummer\ des\ Bildes,\ das\ sichtbar\ gemacht\ werden\ soll\n
comment4.params=
comment4.target=int\ nenneBildNummer()
comment4.text=\n\ Nennt\ die\ Nummer\ des\ aktuellen\ Bilds\ (beginnend\ mit\ 0)\n\n\ @return\ \ \ \ \ \ Die\ Nummer\ des\ aktuellen\ Bilds\ (beginnend\ mit\ 0)\n
comment5.params=deltaX\ deltaY
comment5.target=void\ verschiebenUm(float,\ float)
comment5.text=\n\ Verschiebt\ das\ Objekt\ um\ die\ angegebenen\ Pixel.\ \n\n\ @param\ \ \ deltaX\ \ Pixel\ in\ x-Richtung\ (wird\ bei\ Bedarf\ auf\ ganze\ Pixel\ gerundet)\n\ \n\ @param\ \ \ deltaY\ \ Pixel\ in\ y-Richtung\ (wird\ bei\ Bedarf\ auf\ ganze\ Pixel\ gerundet)\n
comment6.params=r
comment6.target=boolean\ beruehrt(ea.Raum)
comment6.text=\n\ Prueft,\ ob\ ein\ anderes\ Grafik-Objekt\ beruehrt\ wird.\ \n\n\ @param\ \ \ r\ \ \ Ein\ anderes\ BILD,\ RECHTECK,\ KREIS,\ DREIECK,\ ...\n\ \n\ @return\ \ true,\ wenn\ sich\ die\ beiden\ Objekte\ ueberschneiden\n
comment7.params=x\ y
comment7.target=boolean\ beinhaltetPunkt(int,\ int)
comment7.text=\n\ Prueft,\ ob\ das\ Objekt\ einen\ bestimmten\ Punkt\ (in\ Pixel-Koordinaten)\ beinhaltet.\ \n\n\ @param\ \ \ x\ \ \ x-Koordinate\ des\ Punkts\ (Pixel)\n\ \n\ @param\ \ \ y\ \ \ x-Koordinate\ des\ Punkts\ (Pixel)\n\ \n\ @return\ \ \ \ \ \ true,\ wenn\ Punkt\ innerhalb\ der\ Grafik\n
comment8.params=x\ y
comment8.target=void\ setzeMittelpunkt(int,\ int)
comment8.text=\n\ Setzt\ den\ Mittelpunkt\ des\ Objekts\ auf\ einen\ (in\ Pixel-Koordinaten)\ anzugebenden\ Punkt.\ \n\n\ @param\ \ \ x\ \ \ x-Koordinate\ des\ Mittelpunkts\ (Pixel)\n\ \n\ @param\ \ \ y\ \ \ y-Koordinate\ des\ Mittelpunkts\ (Pixel)\n
comment9.params=
comment9.target=int\ nenneMx()
comment9.text=\n\ Nennt\ die\ x-Koordinate\ (in\ Pixel)\ des\ Mittelpunkts\ dieses\ Objekts.\ \n\n\ @return\ \ x-Koordinate\ des\ Mittelpunkts\ (Pixel)\n
numComments=20
